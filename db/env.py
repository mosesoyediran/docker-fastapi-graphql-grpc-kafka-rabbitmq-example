# db/env.py

from logging.config import fileConfig

from alembic import context
from sqlalchemy import engine_from_config, pool

from config.settings import settings
from hello.models import Base

# Pull the DSN directly from Pydantic Settings
DB_URL = str(settings.DATABASE_URL)

# this is the Alembic Config object, which provides values from alembic.ini
config = context.config

# set up Python logging per the config file
fileConfig(config.config_file_name)

# override the URL in alembic.ini with the one from your Settings
config.set_main_option("sqlalchemy.url", DB_URL)

# tell Alembic to use your SQLAlchemy modelsâ€™ metadata
target_metadata = Base.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode (emit SQL without DB connection)."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode (with a live DB connection)."""

    # Prevent empty autogenerated migrations
    def process_revision_directives(context, revision, directives):
        if config.cmd_opts.autogenerate:
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []

    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            process_revision_directives=process_revision_directives,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
